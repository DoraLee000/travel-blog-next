{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadDataSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, select, put, takeLatest, takeEvery } from 'redux-saga/effects';\nimport { getPosts } from '../api/index';\nimport { actionTypes, failure, loadDataSuccess } from './actions';\nexport var getProject = function getProject(state) {\n  return state.count;\n};\n\nfunction loadDataSaga() {\n  var project, res, data;\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(getProject);\n\n        case 3:\n          project = _context.sent;\n          console.log('project', project);\n          _context.next = 7;\n          return getPosts();\n\n        case 7:\n          res = _context.sent;\n          _context.next = 10;\n          return res.json();\n\n        case 10:\n          data = _context.sent;\n          _context.next = 13;\n          return put(loadDataSuccess(data.data));\n\n        case 13:\n          _context.next = 19;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 19;\n          return put(failure(_context.t0));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 15]]);\n} // function* updateDataSaga() {\n//   console.log('Test Result:');\n//   try {\n//     const res = yield getPosts()\n//     // const res = yield fetch('https://jsonplaceholder.typicode.com/users')\n//     const data = yield res.json()\n//     console.log('data',data)\n//     // yield put(loadDataSuccess(data.data))\n//   } catch (err) {\n//     yield put(failure(err))\n//   }\n// }\n\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeEvery(actionTypes.LOAD_DATA, loadDataSaga), takeEvery(actionTypes.UPDATE_DATA, loadDataSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["D:/Dora/travel-blog-next/store/saga.js"],"names":["loadDataSaga","rootSaga","all","call","select","put","takeLatest","takeEvery","getPosts","actionTypes","failure","loadDataSuccess","getProject","state","count","project","console","log","res","json","data","LOAD_DATA","UPDATE_DATA"],"mappings":";;;;yBAOUA,Y;;;yBA0BAC,Q;;AAjCV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,UAAjC,EAA8CC,SAA9C,QAAgE,oBAAhE;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,WAAtD;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,KAAjB;AAAA,CAAnB;;AAEP,SAAUd,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGkB,iBAAMI,MAAM,CAACQ,UAAD,CAAZ;;AAHlB;AAGQG,UAAAA,OAHR;AAIIC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,OAAtB;AAJJ;AAKgB,iBAAMP,QAAQ,EAAd;;AALhB;AAKUU,UAAAA,GALV;AAAA;AAMiB,iBAAMA,GAAG,CAACC,IAAJ,EAAN;;AANjB;AAMUC,UAAAA,IANV;AAAA;AAOI,iBAAMf,GAAG,CAACM,eAAe,CAACS,IAAI,CAACA,IAAN,CAAhB,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMf,GAAG,CAACK,OAAO,aAAR,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAUT,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,GAAG,CAAC,CAACK,SAAS,CAAEE,WAAW,CAACY,SAAd,EAAyBrB,YAAzB,CAAV,EAAiDO,SAAS,CAAEE,WAAW,CAACa,WAAd,EAA2BtB,YAA3B,CAA1D,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAeC,QAAf","sourcesContent":["import { all, call, select, put, takeLatest , takeEvery  } from 'redux-saga/effects';\r\nimport { getPosts } from '../api/index';\r\nimport { actionTypes, failure, loadDataSuccess } from './actions';\r\n\r\n\r\nexport const getProject = (state) => state.count\r\n\r\nfunction* loadDataSaga() {\r\n  try {\r\n    //const res = yield fetch('https://jsonplaceholder.typicode.com/users')\r\n    let project = yield select(getProject)\r\n    console.log('project',project)\r\n    const res = yield getPosts()\r\n    const data = yield res.json()\r\n    yield put(loadDataSuccess(data.data))\r\n  } catch (err) {\r\n    yield put(failure(err))\r\n  }\r\n}\r\n\r\n// function* updateDataSaga() {\r\n//   console.log('Test Result:');\r\n//   try {\r\n//     const res = yield getPosts()\r\n//     // const res = yield fetch('https://jsonplaceholder.typicode.com/users')\r\n//     const data = yield res.json()\r\n//     console.log('data',data)\r\n//     // yield put(loadDataSuccess(data.data))\r\n//   } catch (err) {\r\n//     yield put(failure(err))\r\n//   }\r\n// }\r\n\r\nfunction* rootSaga() {\r\n  yield all([takeEvery (actionTypes.LOAD_DATA, loadDataSaga),takeEvery (actionTypes.UPDATE_DATA, loadDataSaga)])\r\n  // yield [\r\n  //   takeEvery (actionTypes.LOAD_DATA, loadDataSaga),\r\n  //   takeEvery (actionTypes.UPDATE_DATA, loadDataSaga)\r\n  // ]\r\n}\r\n\r\nexport default rootSaga"]},"metadata":{},"sourceType":"module"}