{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadDataSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, takeLatest } from 'redux-saga/effects';\nimport 'isomorphic-unfetch';\nimport { actionTypes, failure, loadDataSuccess } from './actions';\n\nfunction loadDataSaga() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return fetch('https://jsonplaceholder.typicode.com/users');\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return res.json();\n\n        case 6:\n          data = _context.sent;\n          _context.next = 9;\n          return put(loadDataSuccess(data));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put(failure(_context.t0));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(actionTypes.LOAD_DATA, loadDataSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["D:/Dora/travel-blog-next/saga.js"],"names":["loadDataSaga","rootSaga","all","put","takeLatest","actionTypes","failure","loadDataSuccess","fetch","res","json","data","LOAD_DATA"],"mappings":";;;;yBAKUA,Y;;;yBAUAC,Q;;AAfV,SAASC,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAO,oBAAP;AAEA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,WAAtD;;AAEA,SAAUP,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMQ,KAAK,CAAC,4CAAD,CAAX;;AAFhB;AAEUC,UAAAA,GAFV;AAAA;AAGiB,iBAAMA,GAAG,CAACC,IAAJ,EAAN;;AAHjB;AAGUC,UAAAA,IAHV;AAAA;AAII,iBAAMR,GAAG,CAACI,eAAe,CAACI,IAAD,CAAhB,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMI,iBAAMR,GAAG,CAACG,OAAO,aAAR,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,GAAG,CAAC,CAACE,UAAU,CAACC,WAAW,CAACO,SAAb,EAAwBZ,YAAxB,CAAX,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,QAAf","sourcesContent":["import { all, put, takeLatest } from 'redux-saga/effects'\r\nimport 'isomorphic-unfetch'\r\n\r\nimport { actionTypes, failure, loadDataSuccess } from './actions'\r\n\r\nfunction* loadDataSaga() {\r\n  try {\r\n    const res = yield fetch('https://jsonplaceholder.typicode.com/users')\r\n    const data = yield res.json()\r\n    yield put(loadDataSuccess(data))\r\n  } catch (err) {\r\n    yield put(failure(err))\r\n  }\r\n}\r\n\r\nfunction* rootSaga() {\r\n  yield all([takeLatest(actionTypes.LOAD_DATA, loadDataSaga),])\r\n}\r\n\r\nexport default rootSaga"]},"metadata":{},"sourceType":"module"}