{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"../assets/styles.less\";\nimport Link from 'next/link';\nimport Layout from '../components/Layout/layout';\nimport Card from '../components/card';\nimport { getPosts } from '../api/index';\nimport { connect } from \"react-redux\";\n\nconst IndexPage = props => {\n  return (// <Layout>\n    //   <Header />\n    //   <Content>\n    //     <Carousel/>\n    //     <Link href='/About'><a>家目錄</a></Link> |\n    //     <Row justify=\"space-around\" type=\"flex\">\n    //     <Col span={20} className=\"card mb-50\">\n    //       <Row gutter={16}>\n    //         { props.data.map(view => (\n    //           <Col span={8} md={8} sm={12} xs={24} className=\"mb-50\">\n    //             <Card key={view.id} post={view}/>\n    //           </Col>\n    //         ))}\n    //         </Row>\n    //     </Col>\n    //     </Row>\n    //   </Content>\n    //   <Footer />\n    // </Layout> \n    __jsx(Layout, null, __jsx(Link, {\n      href: \"/About\"\n    }, __jsx(\"a\", null, \"\\u5BB6\\u76EE\\u9304\")), \" |\", props.data.map(view => __jsx(_Col, {\n      span: 8,\n      md: 8,\n      sm: 12,\n      xs: 24,\n      className: \"mb-50\"\n    }, __jsx(Card, {\n      key: view.id,\n      post: view\n    }))))\n  );\n};\n\nIndexPage.getInitialProps = async ({\n  store,\n  isServer,\n  pathname,\n  query\n}) => {\n  let page = 1;\n  const res = await getPosts(page);\n  const data = await res.json();\n  store.dispatch({\n    type: \"GETDATA\",\n    payload: _objectSpread({}, data)\n  }); // component will be able to read from store's state when rendered\n\n  return data;\n};\n\nexport default connect()(IndexPage);","map":{"version":3,"sources":["D:/Dora/travel-blog-next/pages/index.js"],"names":["Link","Layout","Card","getPosts","connect","IndexPage","props","data","map","view","id","getInitialProps","store","isServer","pathname","query","page","res","json","dispatch","type","payload"],"mappings":";;;;;;;;;;;;;;;;AACA,OAAO,uBAAP;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAE3B,SACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAC,MAAD,QACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC;AAAX,OAAoB,sCAApB,CADF,QAEWA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAeC,IAAI,IACnB;AAAK,MAAA,IAAI,EAAE,CAAX;AAAc,MAAA,EAAE,EAAE,CAAlB;AAAqB,MAAA,EAAE,EAAE,EAAzB;AAA6B,MAAA,EAAE,EAAE,EAAjC;AAAqC,MAAA,SAAS,EAAC;AAA/C,OACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,MAAA,IAAI,EAAED;AAA1B,MADF,CADA,CAFX;AApBA;AA6BD,CA/BD;;AAkCAJ,SAAS,CAACM,eAAV,GAA4B,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA;AAA7B,CAAP,KAAgD;AAC1E,MAAIC,IAAI,GAAG,CAAX;AACA,QAAMC,GAAG,GAAG,MAAMd,QAAQ,CAACa,IAAD,CAA1B;AACA,QAAMT,IAAI,GAAG,MAAMU,GAAG,CAACC,IAAJ,EAAnB;AACAN,EAAAA,KAAK,CAACO,QAAN,CAAe;AAAEC,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,OAAO,oBAAMd,IAAN;AAA1B,GAAf,EAJ0E,CAIjB;;AACzD,SAAOA,IAAP;AACD,CAND;;AASA,eAAeH,OAAO,GAAGC,SAAH,CAAtB","sourcesContent":["\r\nimport \"../assets/styles.less\";\r\nimport {  Row , Col , Pagination   } from 'antd';\r\nimport Link from 'next/link'\r\nimport Layout from '../components/Layout/layout'\r\nimport Card from '../components/card';\r\nimport { getPosts } from '../api/index';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst IndexPage = (props) => {\r\n \r\n  return (\r\n  // <Layout>\r\n  //   <Header />\r\n  //   <Content>\r\n  //     <Carousel/>\r\n  //     <Link href='/About'><a>家目錄</a></Link> |\r\n  //     <Row justify=\"space-around\" type=\"flex\">\r\n  //     <Col span={20} className=\"card mb-50\">\r\n  //       <Row gutter={16}>\r\n  //         { props.data.map(view => (\r\n  //           <Col span={8} md={8} sm={12} xs={24} className=\"mb-50\">\r\n  //             <Card key={view.id} post={view}/>\r\n  //           </Col>\r\n  //         ))}\r\n  //         </Row>\r\n  //     </Col>\r\n  //     </Row>\r\n  //   </Content>\r\n  //   <Footer />\r\n  // </Layout> \r\n  <Layout>\r\n    <Link href='/About'><a>家目錄</a></Link> |\r\n           { props.data.map(view => (\r\n             <Col span={8} md={8} sm={12} xs={24} className=\"mb-50\">\r\n               <Card key={view.id} post={view}/>\r\n             </Col>\r\n           ))}\r\n  </Layout>\r\n  )\r\n}\r\n\r\n\r\nIndexPage.getInitialProps = async ({ store, isServer, pathname, query }) => {\r\n  let page = 1;\r\n  const res = await getPosts(page);\r\n  const data = await res.json();\r\n  store.dispatch({ type: \"GETDATA\", payload: {...data} }); // component will be able to read from store's state when rendered\r\n  return data\r\n}\r\n\r\n\r\nexport default connect()(IndexPage);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}