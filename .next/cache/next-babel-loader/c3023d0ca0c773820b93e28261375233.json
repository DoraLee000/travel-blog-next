{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOAD_DATA, DECREMENT_COUNTER, INCREMENT_COUNTER } from './actions'; // export const viewList = {\n//   views: [],\n// };\n// function reducer (state = viewList, action) {\n//   switch (action.type) {\n//     case LOAD_DATA:\n//       return {\n//         ...state,\n//         ...{views: action.data}\n//       };\n//     default:\n//       return state;\n//   }\n// }\n// export default reducer;\n\nexport var viewList = {\n  views: [],\n  value: 0\n};\n\nvar counterReducer = function counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : viewList.value;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread({}, state, {\n        value: state.viewList.value + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread({}, state, {\n        value: state.viewList.value - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["D:/Dora/travel-blog-next/redux/reducer.js"],"names":["LOAD_DATA","DECREMENT_COUNTER","INCREMENT_COUNTER","viewList","views","value","counterReducer","state","action","type"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,EAAqBC,iBAArB,EAAwCC,iBAAxC,QAAgE,WAAhE,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,QAAQ,GAAG;AACtBC,EAAAA,KAAK,EAAE,EADe;AAEtBC,EAAAA,KAAK,EAAE;AAFe,CAAjB;;AAKP,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAoC;AAAA,MAAnCC,KAAmC,uEAA3BJ,QAAQ,CAACE,KAAkB;AAAA,MAAXG,MAAW;;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,iBAAL;AACI,+BAAWK,KAAX;AAAkBF,QAAAA,KAAK,EAAEE,KAAK,CAACJ,QAAN,CAAeE,KAAf,GAAuB;AAAhD;;AACJ,SAAKJ,iBAAL;AACI,+BAAWM,KAAX;AAAkBF,QAAAA,KAAK,EAAEE,KAAK,CAACJ,QAAN,CAAeE,KAAf,GAAuB;AAAhD;;AACJ;AACI,+BAAWE,KAAX;AANR;AAQD,CATD;;AAWA,eAAeD,cAAf","sourcesContent":["import { LOAD_DATA , DECREMENT_COUNTER, INCREMENT_COUNTER} from './actions';\r\n\r\n// export const viewList = {\r\n//   views: [],\r\n// };\r\n// function reducer (state = viewList, action) {\r\n//   switch (action.type) {\r\n   \r\n//     case LOAD_DATA:\r\n//       return {\r\n//         ...state,\r\n//         ...{views: action.data}\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n// export default reducer;\r\n\r\nexport const viewList = {\r\n  views: [],\r\n  value: 0\r\n};\r\n\r\nconst counterReducer = (state = viewList.value, action) => {\r\n  switch (action.type) {\r\n      case INCREMENT_COUNTER:\r\n          return {...state, value: state.viewList.value + 1};\r\n      case DECREMENT_COUNTER:\r\n          return {...state, value: state.viewList.value - 1};\r\n      default:\r\n          return {...state};\r\n  }\r\n};\r\n\r\nexport default counterReducer;"]},"metadata":{},"sourceType":"module"}